(* generated by Ott 0.30 from: ../language/sail.ott *)
open PPrintEngine
open PPrintCombinators
open Ast
open Type_check
open Ast_util
   
let rec pp_raw_num x = string (Nat_big_num.to_string x)

and pp_raw_nat x = string (Nat_big_num.to_string x)

and pp_raw_hex x =  string "\"" ^^ string x ^^ string "\""

and pp_raw_bin x =  string "\"" ^^ string x ^^ string "\""

and pp_raw_string x =  string "\"" ^^ string x ^^ string "\""

and pp_raw_regexp x =  string "\"" ^^ string x ^^ string "\""

and pp_raw_real x =  string "\"" ^^ string x ^^ string "\""

and pp_raw_value x = string "TODO:value"

and pp_raw_x x = string "\"" ^^ string x ^^ string "\""

and pp_raw_ix x = string "\"" ^^ string x ^^ string "\""                

and pp_raw_l x = string "" (*(Ast_util.short_string_of_loc x)*)

and pp_raw_env env = string "\nE { " ^^
      string "locals = " ^^ separate (string ",") (List.map (fun (s,(_,t)) -> pp_raw_id s ^^ string " : " ^^ pp_raw_typ t) (Bindings.bindings (Env.get_locals env)))  ^^ string ";\n" ^^
                                                   
      string "typ_vars =  " ^^  separate (string ",") (List.map (fun (s,k) -> pp_raw_kid s ^^ string "=" ^^ pp_raw_kind_aux k) (KBindings.bindings (Env.get_typ_vars env)))  ^^ string ";\n" ^^

      string "C = " ^^ separate (string ",") (List.map (fun c -> pp_raw_n_constraint c) (Env.get_constraints env)) ^^ string ";\n" ^^
      string "Records = " ^^ separate (string ",") (List.map (fun (s,(_,fields)) ->
           string "   " ^^ pp_raw_id s ^^ string " = {" ^^
           separate (string ",") (List.map (fun (typ,id) -> pp_raw_id id ^^ string " : " ^^ pp_raw_typ typ) fields ) ^^ string "}\n"
          ) (Bindings.bindings (Env.get_records env))) ^^ string ";\n" ^^
 
      string "}\n"

and pp_raw_instant (x : tannot ) = match Type_check.get_instantiations x with
    None -> string "(None)"
  | Some inst -> separate (string ",") (List.map (fun (id,ta) -> pp_raw_kid id ^^ string " = " ^^ pp_raw_typ_arg ta)
                                      (KBindings.bindings inst))

               
and pp_raw_annot (x : tannot annot) = string ""
(*                                        
  match x with (_,tannot) -> (match Type_check.destruct_tannot tannot with
                               None -> string "No tannot" |
                               Some (e,t,_) -> pp_raw_env e ^^ string "Typ=" ^^ pp_raw_typ t ^^ string "Inst" ^^
                                      pp_raw_instant tannot)
 *)
(*  (match x with
                        (_,tannot) -> (match tannot with
                                        None -> string "None" |
                                        Some t -> string "( " ^^ pp_raw_env t.env ^^ string "Typ=" ^^
                                                    pp_raw_typ t.typ ^^ string "inst=" ^^ pp_raw_inst t.instantiation
                                                        ^^ string ")")
 *)

and pp_raw_id_aux x = match x with
| Id(x) -> string "Id" ^^ string "(" ^^ pp_raw_x x ^^ string ")"
| Operator(x) -> string "Operator" ^^ string "(" ^^ pp_raw_x x ^^ string ")"

and pp_raw_id x = match x with
| Id_aux(id_aux,l) -> string "Id_aux" ^^ string "(" ^^ pp_raw_id_aux id_aux ^^ string "," ^^ pp_raw_l l ^^ string ")"

and pp_raw_kid_aux x = match x with
| Var(x) -> string "Var" ^^ string "(" ^^ pp_raw_x x ^^ string ")"

and pp_raw_kid x = match x with
| Kid_aux(kid_aux,l) -> string "Kid_aux" ^^ string "(" ^^ pp_raw_kid_aux kid_aux ^^ string "," ^^ pp_raw_l l ^^ string ")"

and pp_raw_kind_aux x = match x with
| K_type -> string "K_type"
| K_int -> string "K_int"
| K_order -> string "K_order"
| K_bool -> string "K_bool"

and pp_raw_kind x = match x with
| K_aux(kind_aux,l) -> string "K_aux" ^^ string "(" ^^ pp_raw_kind_aux kind_aux ^^ string "," ^^ pp_raw_l l ^^ string ")"

and pp_raw_nexp_aux x = match x with
| Nexp_id(id) -> string "Nexp_id" ^^ string "(" ^^ pp_raw_id id ^^ string ")"
| Nexp_var(kid) -> string "Nexp_var" ^^ string "(" ^^ pp_raw_kid kid ^^ string ")"
| Nexp_constant(num) -> string "Nexp_constant" ^^ string "(" ^^ pp_raw_num num ^^ string ")"
| Nexp_app(id,nexp0) -> string "Nexp_app" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (nexp0) -> string "(" ^^ pp_raw_nexp nexp0 ^^ string ")") nexp0) ^^ string "]" ^^ string ")"
| Nexp_times(nexp1,nexp2) -> string "Nexp_times" ^^ string "(" ^^ pp_raw_nexp nexp1 ^^ string "," ^^ pp_raw_nexp nexp2 ^^ string ")"
| Nexp_sum(nexp1,nexp2) -> string "Nexp_sum" ^^ string "(" ^^ pp_raw_nexp nexp1 ^^ string "," ^^ pp_raw_nexp nexp2 ^^ string ")"
| Nexp_minus(nexp1,nexp2) -> string "Nexp_minus" ^^ string "(" ^^ pp_raw_nexp nexp1 ^^ string "," ^^ pp_raw_nexp nexp2 ^^ string ")"
| Nexp_exp(nexp) -> string "Nexp_exp" ^^ string "(" ^^ pp_raw_nexp nexp ^^ string ")"
| Nexp_neg(nexp) -> string "Nexp_neg" ^^ string "(" ^^ pp_raw_nexp nexp ^^ string ")"

and pp_raw_nexp x = match x with
| Nexp_aux(nexp_aux,l) -> string "Nexp_aux" ^^ string "(" ^^ pp_raw_nexp_aux nexp_aux ^^ string "," ^^ pp_raw_l l ^^ string ")"

and pp_raw_order_aux x = match x with
| Ord_var(kid) -> string "Ord_var" ^^ string "(" ^^ pp_raw_kid kid ^^ string ")"
| Ord_inc -> string "Ord_inc"
| Ord_dec -> string "Ord_dec"

and pp_raw_order x = match x with
| Ord_aux(order_aux,l) -> string "Ord_aux" ^^ string "(" ^^ pp_raw_order_aux order_aux ^^ string "," ^^ pp_raw_l l ^^ string ")"

and pp_raw_base_effect_aux x = match x with
| BE_rreg -> string "BE_rreg"
| BE_wreg -> string "BE_wreg"
| BE_rmem -> string "BE_rmem"
| BE_rmemt -> string "BE_rmemt"
| BE_wmem -> string "BE_wmem"
| BE_eamem -> string "BE_eamem"
| BE_exmem -> string "BE_exmem"
| BE_wmv -> string "BE_wmv"
| BE_wmvt -> string "BE_wmvt"
| BE_barr -> string "BE_barr"
| BE_depend -> string "BE_depend"
| BE_undef -> string "BE_undef"
| BE_unspec -> string "BE_unspec"
| BE_nondet -> string "BE_nondet"
| BE_escape -> string "BE_escape"
| BE_config -> string "BE_config"

and pp_raw_base_effect x = match x with
| BE_aux(base_effect_aux,l) -> string "BE_aux" ^^ string "(" ^^ pp_raw_base_effect_aux base_effect_aux ^^ string "," ^^ pp_raw_l l ^^ string ")"

and pp_raw_effect_aux x = match x with
| Effect_set(base_effect0) -> string "Effect_set" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (base_effect0) -> string "(" ^^ pp_raw_base_effect base_effect0 ^^ string ")") base_effect0) ^^ string "]" ^^ string ")"

and pp_raw_effect x = match x with
| Effect_aux(effect_aux,l) -> string "Effect_aux" ^^ string "(" ^^ pp_raw_effect_aux effect_aux ^^ string "," ^^ pp_raw_l l ^^ string ")"

and pp_raw_typ_aux x = match x with
| Typ_internal_unknown -> string "Typ_internal_unknown"
| Typ_id(id) -> string "Typ_id" ^^ string "(" ^^ pp_raw_id id ^^ string ")"
| Typ_var(kid) -> string "Typ_var" ^^ string "(" ^^ pp_raw_kid kid ^^ string ")"
| Typ_fn(typ0,typ2,effect) -> string "Typ_fn" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (typ0) -> string "(" ^^ pp_raw_typ typ0 ^^ string ")") typ0) ^^ string "]" ^^ string "," ^^ pp_raw_typ typ2 ^^ string "," ^^ pp_raw_effect effect ^^ string ")"
| Typ_bidir(typ1,typ2,effect) -> string "Typ_bidir" ^^ string "(" ^^ pp_raw_typ typ1 ^^ string "," ^^ pp_raw_typ typ2 ^^ string "," ^^ pp_raw_effect effect ^^ string ")"
| Typ_tup(typ0) -> string "Typ_tup" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (typ0) -> string "(" ^^ pp_raw_typ typ0 ^^ string ")") typ0) ^^ string "]" ^^ string ")"
| Typ_app(id,typ_arg0) -> string "Typ_app" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (typ_arg0) -> string "(" ^^ pp_raw_typ_arg typ_arg0 ^^ string ")") typ_arg0) ^^ string "]" ^^ string ")"
| Typ_exist(kinded_id0,n_constraint,typ) -> string "Typ_exist" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (kinded_id0) -> string "(" ^^ pp_raw_kinded_id kinded_id0 ^^ string ")") kinded_id0) ^^ string "]" ^^ string "," ^^ pp_raw_n_constraint n_constraint ^^ string "," ^^ pp_raw_typ typ ^^ string ")"

and pp_raw_typ x = match x with
| Typ_aux(typ_aux,l) -> string "Typ_aux" ^^ string "(" ^^ pp_raw_typ_aux typ_aux ^^ string "," ^^ pp_raw_l l ^^ string ")"

and pp_raw_typ_arg_aux x = match x with
| A_nexp(nexp) -> string "A_nexp" ^^ string "(" ^^ pp_raw_nexp nexp ^^ string ")"
| A_typ(typ) -> string "A_typ" ^^ string "(" ^^ pp_raw_typ typ ^^ string ")"
| A_order(order) -> string "A_order" ^^ string "(" ^^ pp_raw_order order ^^ string ")"
| A_bool(n_constraint) -> string "A_bool" ^^ string "(" ^^ pp_raw_n_constraint n_constraint ^^ string ")"

and pp_raw_typ_arg x = match x with
| A_aux(typ_arg_aux,l) -> string "A_aux" ^^ string "(" ^^ pp_raw_typ_arg_aux typ_arg_aux ^^ string "," ^^ pp_raw_l l ^^ string ")"

and pp_raw_n_constraint_aux x = match x with
| NC_equal(nexp,nexp_prime) -> string "NC_equal" ^^ string "(" ^^ pp_raw_nexp nexp ^^ string "," ^^ pp_raw_nexp nexp_prime ^^ string ")"
| NC_bounded_ge(nexp,nexp_prime) -> string "NC_bounded_ge" ^^ string "(" ^^ pp_raw_nexp nexp ^^ string "," ^^ pp_raw_nexp nexp_prime ^^ string ")"
| NC_bounded_gt(nexp,nexp_prime) -> string "NC_bounded_gt" ^^ string "(" ^^ pp_raw_nexp nexp ^^ string "," ^^ pp_raw_nexp nexp_prime ^^ string ")"
| NC_bounded_le(nexp,nexp_prime) -> string "NC_bounded_le" ^^ string "(" ^^ pp_raw_nexp nexp ^^ string "," ^^ pp_raw_nexp nexp_prime ^^ string ")"
| NC_bounded_lt(nexp,nexp_prime) -> string "NC_bounded_lt" ^^ string "(" ^^ pp_raw_nexp nexp ^^ string "," ^^ pp_raw_nexp nexp_prime ^^ string ")"
| NC_not_equal(nexp,nexp_prime) -> string "NC_not_equal" ^^ string "(" ^^ pp_raw_nexp nexp ^^ string "," ^^ pp_raw_nexp nexp_prime ^^ string ")"
| NC_set(kid,num0) -> string "NC_set" ^^ string "(" ^^ pp_raw_kid kid ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (num0) -> string "(" ^^ pp_raw_num num0 ^^ string ")") num0) ^^ string "]" ^^ string ")"
| NC_or(n_constraint,n_constraint_prime) -> string "NC_or" ^^ string "(" ^^ pp_raw_n_constraint n_constraint ^^ string "," ^^ pp_raw_n_constraint n_constraint_prime ^^ string ")"
| NC_and(n_constraint,n_constraint_prime) -> string "NC_and" ^^ string "(" ^^ pp_raw_n_constraint n_constraint ^^ string "," ^^ pp_raw_n_constraint n_constraint_prime ^^ string ")"
| NC_app(id,typ_arg0) -> string "NC_app" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (typ_arg0) -> string "(" ^^ pp_raw_typ_arg typ_arg0 ^^ string ")") typ_arg0) ^^ string "]" ^^ string ")"
| NC_var(kid) -> string "NC_var" ^^ string "(" ^^ pp_raw_kid kid ^^ string ")"
| NC_true -> string "NC_true"
| NC_false -> string "NC_false"

and pp_raw_n_constraint x = match x with
| NC_aux(n_constraint_aux,l) -> string "NC_aux" ^^ string "(" ^^ pp_raw_n_constraint_aux n_constraint_aux ^^ string "," ^^ pp_raw_l l ^^ string ")"

and pp_raw_kinded_id_aux x = match x with
| KOpt_kind(kind,kid) -> string "KOpt_kind" ^^ string "(" ^^ pp_raw_kind kind ^^ string "," ^^ pp_raw_kid kid ^^ string ")"

and pp_raw_kinded_id x = match x with
| KOpt_aux(kinded_id_aux,l) -> string "KOpt_aux" ^^ string "(" ^^ pp_raw_kinded_id_aux kinded_id_aux ^^ string "," ^^ pp_raw_l l ^^ string ")"

and pp_raw_quant_item_aux x = match x with
| QI_id(kinded_id) -> string "QI_id" ^^ string "(" ^^ pp_raw_kinded_id kinded_id ^^ string ")"
| QI_constraint(n_constraint) -> string "QI_constraint" ^^ string "(" ^^ pp_raw_n_constraint n_constraint ^^ string ")"
| QI_constant(kinded_id0) -> string "QI_constant" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (kinded_id0) -> string "(" ^^ pp_raw_kinded_id kinded_id0 ^^ string ")") kinded_id0) ^^ string "]" ^^ string ")"

and pp_raw_quant_item x = match x with
| QI_aux(quant_item_aux,l) -> string "QI_aux" ^^ string "(" ^^ pp_raw_quant_item_aux quant_item_aux ^^ string "," ^^ pp_raw_l l ^^ string ")"

and pp_raw_typquant_aux x = match x with
| TypQ_tq(quant_item0) -> string "TypQ_tq" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (quant_item0) -> string "(" ^^ pp_raw_quant_item quant_item0 ^^ string ")") quant_item0) ^^ string "]" ^^ string ")"
| TypQ_no_forall -> string "TypQ_no_forall"

and pp_raw_typquant x = match x with
| TypQ_aux(typquant_aux,l) -> string "TypQ_aux" ^^ string "(" ^^ pp_raw_typquant_aux typquant_aux ^^ string "," ^^ pp_raw_l l ^^ string ")"

and pp_raw_typschm_aux x = match x with
| TypSchm_ts(typquant,typ) -> string "TypSchm_ts" ^^ string "(" ^^ pp_raw_typquant typquant ^^ string "," ^^ pp_raw_typ typ ^^ string ")"

and pp_raw_typschm x = match x with
| TypSchm_aux(typschm_aux,l) -> string "TypSchm_aux" ^^ string "(" ^^ pp_raw_typschm_aux typschm_aux ^^ string "," ^^ pp_raw_l l ^^ string ")"

and pp_raw_type_def x = match x with
| TD_aux (x,y) -> pp_raw_type_def_aux x

and pp_raw_type_def_aux x = match x with
| TD_abbrev(id,typquant,typ_arg) -> string "TD_abbrev" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ pp_raw_typquant typquant ^^ string "," ^^ pp_raw_typ_arg typ_arg ^^ string ")"
| TD_record(id,typquant,typ0_id0,semi_opt) -> string "TD_record" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ pp_raw_typquant typquant ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (typ0,id0) -> string "(" ^^ pp_raw_typ typ0 ^^ string "," ^^ pp_raw_id id0 ^^ string ")") typ0_id0) ^^ string "]" ^^ string "," ^^ pp_raw_semi_opt semi_opt ^^ string ")"
| TD_variant(id,typquant,type_union0,semi_opt) -> string "TD_variant" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ pp_raw_typquant typquant ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (type_union0) -> string "(" ^^ pp_raw_type_union type_union0 ^^ string ")") type_union0) ^^ string "]" ^^ string "," ^^ pp_raw_semi_opt semi_opt ^^ string ")"
| TD_enum(id,id0,semi_opt) -> string "TD_enum" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (id0) -> string "(" ^^ pp_raw_id id0 ^^ string ")") id0) ^^ string "]" ^^ string "," ^^ pp_raw_semi_opt semi_opt ^^ string ")"
| TD_bitfield(id,typ,id0_index_range0) -> string "TD_bitfield" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ pp_raw_typ typ ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (id0,index_range0) -> string "(" ^^ pp_raw_id id0 ^^ string "," ^^ pp_raw_index_range index_range0 ^^ string ")") id0_index_range0) ^^ string "]" ^^ string ")"

and pp_raw_type_union_aux x = match x with
| Tu_ty_id(typ,id) -> string "Tu_ty_id" ^^ string "(" ^^ pp_raw_typ typ ^^ string "," ^^ pp_raw_id id ^^ string ")"

and pp_raw_type_union x = match x with
| Tu_aux(type_union_aux,l) -> string "Tu_aux" ^^ string "(" ^^ pp_raw_type_union_aux type_union_aux ^^ string "," ^^ pp_raw_l l ^^ string ")"

and pp_raw_index_range_aux x = match x with
| BF_single(nexp) -> string "BF_single" ^^ string "(" ^^ pp_raw_nexp nexp ^^ string ")"
| BF_range(nexp1,nexp2) -> string "BF_range" ^^ string "(" ^^ pp_raw_nexp nexp1 ^^ string "," ^^ pp_raw_nexp nexp2 ^^ string ")"
| BF_concat(index_range1,index_range2) -> string "BF_concat" ^^ string "(" ^^ pp_raw_index_range index_range1 ^^ string "," ^^ pp_raw_index_range index_range2 ^^ string ")"

and pp_raw_index_range x = match x with
| BF_aux(index_range_aux,l) -> string "BF_aux" ^^ string "(" ^^ pp_raw_index_range_aux index_range_aux ^^ string "," ^^ pp_raw_l l ^^ string ")"

and pp_raw_lit_aux x = match x with
| L_unit -> string "L_unit"
| L_zero -> string "L_zero"
| L_one -> string "L_one"
| L_true -> string "L_true"
| L_false -> string "L_false"
| L_num(num) -> string "L_num" ^^ string "(" ^^ pp_raw_num num ^^ string ")"
| L_hex(hex) -> string "L_hex" ^^ string "(" ^^ pp_raw_hex hex ^^ string ")"
| L_bin(bin) -> string "L_bin" ^^ string "(" ^^ pp_raw_bin bin ^^ string ")"
| L_string(string1) -> string "L_string" ^^ string "(" ^^ pp_raw_string string1 ^^ string ")"
| L_undef -> string "L_undef"
| L_real(real) -> string "L_real" ^^ string "(" ^^ pp_raw_real real ^^ string ")"

and pp_raw_lit x = match x with
| L_aux(lit_aux,l) -> string "L_aux" ^^ string "(" ^^ pp_raw_lit_aux lit_aux ^^ string "," ^^ pp_raw_l l ^^ string ")"

and pp_raw_semi_opt _ = string "semi_opt"

and pp_raw_typ_pat_aux x = match x with
| TP_wild -> string "TP_wild"
| TP_var(kid) -> string "TP_var" ^^ string "(" ^^ pp_raw_kid kid ^^ string ")"
| TP_app(id,typ_pat0) -> string "TP_app" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (typ_pat0) -> string "(" ^^ pp_raw_typ_pat typ_pat0 ^^ string ")") typ_pat0) ^^ string "]" ^^ string ")"

and pp_raw_typ_pat x = match x with
| TP_aux(typ_pat_aux,l) -> string "TP_aux" ^^ string "(" ^^ pp_raw_typ_pat_aux typ_pat_aux ^^ string "," ^^ pp_raw_l l ^^ string ")"

and pp_raw_pat_aux x = match x with
| P_lit(lit) -> string "P_lit" ^^ string "(" ^^ pp_raw_lit lit ^^ string ")"
| P_wild -> string "P_wild"
| P_or(pat1,pat2) -> string "P_or" ^^ string "(" ^^ pp_raw_pat pat1 ^^ string "," ^^ pp_raw_pat pat2 ^^ string ")"
| P_not(pat) -> string "P_not" ^^ string "(" ^^ pp_raw_pat pat ^^ string ")"
| P_as(pat,id) -> string "P_as" ^^ string "(" ^^ pp_raw_pat pat ^^ string "," ^^ pp_raw_id id ^^ string ")"
| P_typ(typ,pat) -> string "P_typ" ^^ string "(" ^^ pp_raw_typ typ ^^ string "," ^^ pp_raw_pat pat ^^ string ")"
| P_id(id) -> string "P_id" ^^ string "(" ^^ pp_raw_id id ^^ string ")"
| P_var(pat,typ_pat) -> string "P_var" ^^ string "(" ^^ pp_raw_pat pat ^^ string "," ^^ pp_raw_typ_pat typ_pat ^^ string ")"
| P_app(id,pat0) -> string "P_app" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (pat0) -> string "(" ^^ pp_raw_pat pat0 ^^ string ")") pat0) ^^ string "]" ^^ string ")"
| P_vector(pat0) -> string "P_vector" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (pat0) -> string "(" ^^ pp_raw_pat pat0 ^^ string ")") pat0) ^^ string "]" ^^ string ")"
| P_vector_concat(pat0) -> string "P_vector_concat" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (pat0) -> string "(" ^^ pp_raw_pat pat0 ^^ string ")") pat0) ^^ string "]" ^^ string ")"
| P_tup(pat0) -> string "P_tup" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (pat0) -> string "(" ^^ pp_raw_pat pat0 ^^ string ")") pat0) ^^ string "]" ^^ string ")"
| P_list(pat0) -> string "P_list" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (pat0) -> string "(" ^^ pp_raw_pat pat0 ^^ string ")") pat0) ^^ string "]" ^^ string ")"
| P_cons(pat1,pat2) -> string "P_cons" ^^ string "(" ^^ pp_raw_pat pat1 ^^ string "," ^^ pp_raw_pat pat2 ^^ string ")"
| P_string_append(pat0) -> string "P_string_append" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (pat0) -> string "(" ^^ pp_raw_pat pat0 ^^ string ")") pat0) ^^ string "]" ^^ string ")"

and pp_raw_pat x = match x with
| P_aux(pat_aux,annot) -> string "P_aux" ^^ string "(" ^^ pp_raw_pat_aux pat_aux ^^ string "," ^^ pp_raw_annot annot ^^ string ")"

and pp_raw_loop _ = string "loop"

and pp_raw_internal_loop_measure_aux x = match x with
| Measure_none -> string "Measure_none"
| Measure_some(exp) -> string "Measure_some" ^^ string "(" ^^ pp_raw_exp exp ^^ string ")"

and pp_raw_internal_loop_measure x = match x with
| Measure_aux(internal_loop_measure_aux,l) -> string "Measure_aux" ^^ string "(" ^^ pp_raw_internal_loop_measure_aux internal_loop_measure_aux ^^ string "," ^^ pp_raw_l l ^^ string ")"

and pp_raw_exp_aux x = match x with
| E_block(exp0) -> string "E_block" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (exp0) -> string "(" ^^ pp_raw_exp exp0 ^^ string ")") exp0) ^^ string "]" ^^ string ")"
| E_id(id) -> string "E_id" ^^ string "(" ^^ pp_raw_id id ^^ string ")"
| E_lit(lit) -> string "E_lit" ^^ string "(" ^^ pp_raw_lit lit ^^ string ")"
| E_cast(typ,exp) -> string "E_cast" ^^ string "(" ^^ pp_raw_typ typ ^^ string "," ^^ pp_raw_exp exp ^^ string ")"
| E_app(id,exp0) -> string "E_app" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (exp0) -> string "(" ^^ pp_raw_exp exp0 ^^ string ")") exp0) ^^ string "]" ^^ string ")"
| E_app_infix(exp1,id,exp2) -> string "E_app_infix" ^^ string "(" ^^ pp_raw_exp exp1 ^^ string "," ^^ pp_raw_id id ^^ string "," ^^ pp_raw_exp exp2 ^^ string ")"
| E_tuple(exp0) -> string "E_tuple" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (exp0) -> string "(" ^^ pp_raw_exp exp0 ^^ string ")") exp0) ^^ string "]" ^^ string ")"
| E_if(exp1,exp2,exp3) -> string "E_if" ^^ string "(" ^^ pp_raw_exp exp1 ^^ string "," ^^ pp_raw_exp exp2 ^^ string "," ^^ pp_raw_exp exp3 ^^ string ")"
| E_loop(loop,internal_loop_measure,exp1,exp2) -> string "E_loop" ^^ string "(" ^^ pp_raw_loop loop ^^ string "," ^^ pp_raw_internal_loop_measure internal_loop_measure ^^ string "," ^^ pp_raw_exp exp1 ^^ string "," ^^ pp_raw_exp exp2 ^^ string ")"
| E_for(id,exp1,exp2,exp3,order,exp4) -> string "E_for" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ pp_raw_exp exp1 ^^ string "," ^^ pp_raw_exp exp2 ^^ string "," ^^ pp_raw_exp exp3 ^^ string "," ^^ pp_raw_order order ^^ string "," ^^ pp_raw_exp exp4 ^^ string ")"
| E_vector(exp0) -> string "E_vector" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (exp0) -> string "(" ^^ pp_raw_exp exp0 ^^ string ")") exp0) ^^ string "]" ^^ string ")"
| E_vector_access(exp,exp_prime) -> string "E_vector_access" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| E_vector_subrange(exp,exp1,exp2) -> string "E_vector_subrange" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp1 ^^ string "," ^^ pp_raw_exp exp2 ^^ string ")"
| E_vector_update(exp,exp1,exp2) -> string "E_vector_update" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp1 ^^ string "," ^^ pp_raw_exp exp2 ^^ string ")"
| E_vector_update_subrange(exp,exp1,exp2,exp3) -> string "E_vector_update_subrange" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp1 ^^ string "," ^^ pp_raw_exp exp2 ^^ string "," ^^ pp_raw_exp exp3 ^^ string ")"
| E_vector_append(exp1,exp2) -> string "E_vector_append" ^^ string "(" ^^ pp_raw_exp exp1 ^^ string "," ^^ pp_raw_exp exp2 ^^ string ")"
| E_list(exp0) -> string "E_list" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (exp0) -> string "(" ^^ pp_raw_exp exp0 ^^ string ")") exp0) ^^ string "]" ^^ string ")"
| E_cons(exp1,exp2) -> string "E_cons" ^^ string "(" ^^ pp_raw_exp exp1 ^^ string "," ^^ pp_raw_exp exp2 ^^ string ")"
| E_record(fexp0) -> string "E_record" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (fexp0) -> string "(" ^^ pp_raw_fexp fexp0 ^^ string ")") fexp0) ^^ string "]" ^^ string ")"
| E_record_update(exp,fexp0) -> string "E_record_update" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (fexp0) -> string "(" ^^ pp_raw_fexp fexp0 ^^ string ")") fexp0) ^^ string "]" ^^ string ")"
| E_field(exp,id) -> string "E_field" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_id id ^^ string ")"
| E_case(exp,pexp0) -> string "E_case" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (pexp0) -> string "(" ^^ pp_raw_pexp pexp0 ^^ string ")") pexp0) ^^ string "]" ^^ string ")"
| E_let(letbind,exp) -> string "E_let" ^^ string "(" ^^ pp_raw_letbind letbind ^^ string "," ^^ pp_raw_exp exp ^^ string ")"
| E_assign(lexp,exp) -> string "E_assign" ^^ string "(" ^^ pp_raw_lexp lexp ^^ string "," ^^ pp_raw_exp exp ^^ string ")"
| E_sizeof(nexp) -> string "E_sizeof" ^^ string "(" ^^ pp_raw_nexp nexp ^^ string ")"
| E_return(exp) -> string "E_return" ^^ string "(" ^^ pp_raw_exp exp ^^ string ")"
| E_exit(exp) -> string "E_exit" ^^ string "(" ^^ pp_raw_exp exp ^^ string ")"
| E_ref(id) -> string "E_ref" ^^ string "(" ^^ pp_raw_id id ^^ string ")"
| E_throw(exp) -> string "E_throw" ^^ string "(" ^^ pp_raw_exp exp ^^ string ")"
| E_try(exp,pexp0) -> string "E_try" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (pexp0) -> string "(" ^^ pp_raw_pexp pexp0 ^^ string ")") pexp0) ^^ string "]" ^^ string ")"
| E_assert(exp,exp_prime) -> string "E_assert" ^^ string "(" ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| E_var(lexp,exp,exp_prime) -> string "E_var" ^^ string "(" ^^ pp_raw_lexp lexp ^^ string "," ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| E_internal_plet(pat,exp,exp_prime) -> string "E_internal_plet" ^^ string "(" ^^ pp_raw_pat pat ^^ string "," ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| E_internal_return(exp) -> string "E_internal_return" ^^ string "(" ^^ pp_raw_exp exp ^^ string ")"
| E_internal_value(value) -> string "E_internal_value" ^^ string "(" ^^ pp_raw_value value ^^ string ")"
| E_constraint(n_constraint) -> string "E_constraint" ^^ string "(" ^^ pp_raw_n_constraint n_constraint ^^ string ")"

and pp_raw_exp x = match x with
| E_aux(exp_aux,annot) -> string "E_aux" ^^ string "(" ^^ pp_raw_exp_aux exp_aux ^^ string "," ^^ pp_raw_annot annot ^^ string ")\n"

and pp_raw_lexp_aux x = match x with
| LEXP_id(id) -> string "LEXP_id" ^^ string "(" ^^ pp_raw_id id ^^ string ")"
| LEXP_deref(exp) -> string "LEXP_deref" ^^ string "(" ^^ pp_raw_exp exp ^^ string ")"
| LEXP_memory(id,exp0) -> string "LEXP_memory" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (exp0) -> string "(" ^^ pp_raw_exp exp0 ^^ string ")") exp0) ^^ string "]" ^^ string ")"
| LEXP_cast(typ,id) -> string "LEXP_cast" ^^ string "(" ^^ pp_raw_typ typ ^^ string "," ^^ pp_raw_id id ^^ string ")"
| LEXP_tup(lexp0) -> string "LEXP_tup" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (lexp0) -> string "(" ^^ pp_raw_lexp lexp0 ^^ string ")") lexp0) ^^ string "]" ^^ string ")"
| LEXP_vector_concat(lexp0) -> string "LEXP_vector_concat" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (lexp0) -> string "(" ^^ pp_raw_lexp lexp0 ^^ string ")") lexp0) ^^ string "]" ^^ string ")"
| LEXP_vector(lexp,exp) -> string "LEXP_vector" ^^ string "(" ^^ pp_raw_lexp lexp ^^ string "," ^^ pp_raw_exp exp ^^ string ")"
| LEXP_vector_range(lexp,exp1,exp2) -> string "LEXP_vector_range" ^^ string "(" ^^ pp_raw_lexp lexp ^^ string "," ^^ pp_raw_exp exp1 ^^ string "," ^^ pp_raw_exp exp2 ^^ string ")"
| LEXP_field(lexp,id) -> string "LEXP_field" ^^ string "(" ^^ pp_raw_lexp lexp ^^ string "," ^^ pp_raw_id id ^^ string ")"

and pp_raw_lexp x = match x with
| LEXP_aux(lexp_aux,annot) -> string "LEXP_aux" ^^ string "(" ^^ pp_raw_lexp_aux lexp_aux ^^ string "," ^^ pp_raw_annot annot ^^ string ")"

and pp_raw_fexp_aux x = match x with
| FE_Fexp(id,exp) -> string "FE_Fexp" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ pp_raw_exp exp ^^ string ")"

and pp_raw_fexp x = match x with
| FE_aux(fexp_aux,annot) -> string "FE_aux" ^^ string "(" ^^ pp_raw_fexp_aux fexp_aux ^^ string "," ^^ pp_raw_annot annot ^^ string ")"

and pp_raw_opt_default_aux x = match x with
| Def_val_empty -> string "Def_val_empty"
| Def_val_dec(exp) -> string "Def_val_dec" ^^ string "(" ^^ pp_raw_exp exp ^^ string ")"

and pp_raw_opt_default x = match x with
| Def_val_aux(opt_default_aux,annot) -> string "Def_val_aux" ^^ string "(" ^^ pp_raw_opt_default_aux opt_default_aux ^^ string "," ^^ pp_raw_annot annot ^^ string ")"

and pp_raw_pexp_aux x = match x with
| Pat_exp(pat,exp) -> string "Pat_exp" ^^ string "(" ^^ pp_raw_pat pat ^^ string "," ^^ pp_raw_exp exp ^^ string ")"
| Pat_when(pat,exp1,exp) -> string "Pat_when" ^^ string "(" ^^ pp_raw_pat pat ^^ string "," ^^ pp_raw_exp exp1 ^^ string "," ^^ pp_raw_exp exp ^^ string ")"

and pp_raw_pexp x = match x with
| Pat_aux(pexp_aux,annot) -> string "Pat_aux" ^^ string "(" ^^ pp_raw_pexp_aux pexp_aux ^^ string "," ^^ pp_raw_annot annot ^^ string ")"

and pp_raw_tannot_opt_aux x = match x with
| Typ_annot_opt_none -> string "Typ_annot_opt_none"
| Typ_annot_opt_some(typquant,typ) -> string "Typ_annot_opt_some" ^^ string "(" ^^ pp_raw_typquant typquant ^^ string "," ^^ pp_raw_typ typ ^^ string ")"

and pp_raw_tannot_opt x = match x with
| Typ_annot_opt_aux(tannot_opt_aux,l) -> string "Typ_annot_opt_aux" ^^ string "(" ^^ pp_raw_tannot_opt_aux tannot_opt_aux ^^ string "," ^^ pp_raw_l l ^^ string ")"

and pp_raw_rec_opt_aux x = match x with
| Rec_nonrec -> string "Rec_nonrec"
| Rec_rec -> string "Rec_rec"
| Rec_measure(pat,exp) -> string "Rec_measure" ^^ string "(" ^^ pp_raw_pat pat ^^ string "," ^^ pp_raw_exp exp ^^ string ")"

and pp_raw_rec_opt x = match x with
| Rec_aux(rec_opt_aux,l) -> string "Rec_aux" ^^ string "(" ^^ pp_raw_rec_opt_aux rec_opt_aux ^^ string "," ^^ pp_raw_l l ^^ string ")"

and pp_raw_effect_opt_aux x = match x with
| Effect_opt_none -> string "Effect_opt_none"
| Effect_opt_effect(effect) -> string "Effect_opt_effect" ^^ string "(" ^^ pp_raw_effect effect ^^ string ")"

and pp_raw_effect_opt x = match x with
| Effect_opt_aux(effect_opt_aux,l) -> string "Effect_opt_aux" ^^ string "(" ^^ pp_raw_effect_opt_aux effect_opt_aux ^^ string "," ^^ pp_raw_l l ^^ string ")"

and pp_raw_pexp_funcl x = pp_raw_pexp x

and pp_raw_funcl_aux x = match x with
| FCL_Funcl(id,pexp_funcl) -> string "FCL_Funcl" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ pp_raw_pexp_funcl pexp_funcl ^^ string ")"

and pp_raw_funcl x = match x with
| FCL_aux(funcl_aux,annot) -> string "FCL_aux" ^^ string "(" ^^ pp_raw_funcl_aux funcl_aux ^^ string "," ^^ pp_raw_annot annot ^^ string ")"

and pp_raw_fundef_aux x = match x with
| FD_function(rec_opt,tannot_opt,effect_opt,funcl0) -> string "FD_function" ^^ string "(" ^^ pp_raw_rec_opt rec_opt ^^ string "," ^^ pp_raw_tannot_opt tannot_opt ^^ string "," ^^ pp_raw_effect_opt effect_opt ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (funcl0) -> string "(" ^^ pp_raw_funcl funcl0 ^^ string ")") funcl0) ^^ string "]" ^^ string ")"

and pp_raw_fundef x = match x with
| FD_aux(fundef_aux,annot) -> string "FD_aux" ^^ string "(" ^^ pp_raw_fundef_aux fundef_aux ^^ string "," ^^ pp_raw_annot annot ^^ string ")"

and pp_raw_mpat_aux x = match x with
| MP_lit(lit) -> string "MP_lit" ^^ string "(" ^^ pp_raw_lit lit ^^ string ")"
| MP_id(id) -> string "MP_id" ^^ string "(" ^^ pp_raw_id id ^^ string ")"
| MP_app(id,mpat0) -> string "MP_app" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (mpat0) -> string "(" ^^ pp_raw_mpat mpat0 ^^ string ")") mpat0) ^^ string "]" ^^ string ")"
| MP_vector(mpat0) -> string "MP_vector" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (mpat0) -> string "(" ^^ pp_raw_mpat mpat0 ^^ string ")") mpat0) ^^ string "]" ^^ string ")"
| MP_vector_concat(mpat0) -> string "MP_vector_concat" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (mpat0) -> string "(" ^^ pp_raw_mpat mpat0 ^^ string ")") mpat0) ^^ string "]" ^^ string ")"
| MP_tup(mpat0) -> string "MP_tup" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (mpat0) -> string "(" ^^ pp_raw_mpat mpat0 ^^ string ")") mpat0) ^^ string "]" ^^ string ")"
| MP_list(mpat0) -> string "MP_list" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (mpat0) -> string "(" ^^ pp_raw_mpat mpat0 ^^ string ")") mpat0) ^^ string "]" ^^ string ")"
| MP_cons(mpat1,mpat2) -> string "MP_cons" ^^ string "(" ^^ pp_raw_mpat mpat1 ^^ string "," ^^ pp_raw_mpat mpat2 ^^ string ")"
| MP_string_append(mpat0) -> string "MP_string_append" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (mpat0) -> string "(" ^^ pp_raw_mpat mpat0 ^^ string ")") mpat0) ^^ string "]" ^^ string ")"
| MP_typ(mpat,typ) -> string "MP_typ" ^^ string "(" ^^ pp_raw_mpat mpat ^^ string "," ^^ pp_raw_typ typ ^^ string ")"
| MP_as(mpat,id) -> string "MP_as" ^^ string "(" ^^ pp_raw_mpat mpat ^^ string "," ^^ pp_raw_id id ^^ string ")"

and pp_raw_mpat x = match x with
| MP_aux(mpat_aux,annot) -> string "MP_aux" ^^ string "(" ^^ pp_raw_mpat_aux mpat_aux ^^ string "," ^^ pp_raw_annot annot ^^ string ")"

and pp_raw_mpexp_aux x = match x with
| MPat_pat(mpat) -> string "MPat_pat" ^^ string "(" ^^ pp_raw_mpat mpat ^^ string ")"
| MPat_when(mpat,exp) -> string "MPat_when" ^^ string "(" ^^ pp_raw_mpat mpat ^^ string "," ^^ pp_raw_exp exp ^^ string ")"

and pp_raw_mpexp x = match x with
| MPat_aux(mpexp_aux,annot) -> string "MPat_aux" ^^ string "(" ^^ pp_raw_mpexp_aux mpexp_aux ^^ string "," ^^ pp_raw_annot annot ^^ string ")"

and pp_raw_mapcl_aux x = match x with
| MCL_bidir(mpexp1,mpexp2) -> string "MCL_bidir" ^^ string "(" ^^ pp_raw_mpexp mpexp1 ^^ string "," ^^ pp_raw_mpexp mpexp2 ^^ string ")"
| MCL_forwards(mpexp,exp) -> string "MCL_forwards" ^^ string "(" ^^ pp_raw_mpexp mpexp ^^ string "," ^^ pp_raw_exp exp ^^ string ")"
| MCL_backwards(mpexp,exp) -> string "MCL_backwards" ^^ string "(" ^^ pp_raw_mpexp mpexp ^^ string "," ^^ pp_raw_exp exp ^^ string ")"

and pp_raw_mapcl x = match x with
| MCL_aux(mapcl_aux,annot) -> string "MCL_aux" ^^ string "(" ^^ pp_raw_mapcl_aux mapcl_aux ^^ string "," ^^ pp_raw_annot annot ^^ string ")"

and pp_raw_mapdef_aux x = match x with
| MD_mapping(id,tannot_opt,mapcl0) -> string "MD_mapping" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ pp_raw_tannot_opt tannot_opt ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (mapcl0) -> string "(" ^^ pp_raw_mapcl mapcl0 ^^ string ")") mapcl0) ^^ string "]" ^^ string ")"

and pp_raw_mapdef x = match x with
| MD_aux(mapdef_aux,annot) -> string "MD_aux" ^^ string "(" ^^ pp_raw_mapdef_aux mapdef_aux ^^ string "," ^^ pp_raw_annot annot ^^ string ")"

and pp_raw_letbind_aux x = match x with
| LB_val(pat,exp) -> string "LB_val" ^^ string "(" ^^ pp_raw_pat pat ^^ string "," ^^ pp_raw_exp exp ^^ string ")"

and pp_raw_letbind x = match x with
| LB_aux(letbind_aux,annot) -> string "LB_aux" ^^ string "(" ^^ pp_raw_letbind_aux letbind_aux ^^ string "," ^^ pp_raw_annot annot ^^ string ")"

and pp_raw_val_spec x = match x with VS_aux(vs,annot) -> pp_raw_val_spec_aux vs

and pp_raw_val_spec_aux x =
match x with 
| VS_val_spec(ts,id,ext,is_cast) ->
  let doc_extern ext =
    let docs = List.map (fun (backend, rep) -> string (backend ^ ":") ^^ space ^^ utf8string ("\"" ^ String.escaped rep ^ "\"")) ext in
    (if docs = [] then string "[]" else  brackets (separate comma docs))
    in
  string "VS_val_spec("
(*     if comment then docstring annot else empty*) 
     ^^ (if is_cast then (string "cast_true") else (string "cast_false")) ^^ comma
     ^^ pp_raw_id id ^^ comma
     ^^ doc_extern ext ^^ comma
     ^^ pp_raw_typschm ts
     ^^ string ")"

and pp_raw_default_spec_aux x = match x with
| DT_order(order) -> string "DT_order" ^^ string "(" ^^ pp_raw_order order ^^ string ")"

and pp_raw_default_spec x = match x with
| DT_aux(default_spec_aux,l) -> string "DT_aux" ^^ string "(" ^^ pp_raw_default_spec_aux default_spec_aux ^^ string "," ^^ pp_raw_l l ^^ string ")"

and pp_raw_scattered_def_aux x = match x with
| SD_function(rec_opt,tannot_opt,effect_opt,id) -> string "SD_function" ^^ string "(" ^^ pp_raw_rec_opt rec_opt ^^ string "," ^^ pp_raw_tannot_opt tannot_opt ^^ string "," ^^ pp_raw_effect_opt effect_opt ^^ string "," ^^ pp_raw_id id ^^ string ")"
| SD_funcl(funcl) -> string "SD_funcl" ^^ string "(" ^^ pp_raw_funcl funcl ^^ string ")"
| SD_variant(id,typquant) -> string "SD_variant" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ pp_raw_typquant typquant ^^ string ")"
| SD_unioncl(id,type_union) -> string "SD_unioncl" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ pp_raw_type_union type_union ^^ string ")"
| SD_mapping(id,tannot_opt) -> string "SD_mapping" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ pp_raw_tannot_opt tannot_opt ^^ string ")"
| SD_mapcl(id,mapcl) -> string "SD_mapcl" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ pp_raw_mapcl mapcl ^^ string ")"
| SD_end(id) -> string "SD_end" ^^ string "(" ^^ pp_raw_id id ^^ string ")"

and pp_raw_scattered_def x = match x with
| SD_aux(scattered_def_aux,annot) -> string "SD_aux" ^^ string "(" ^^ pp_raw_scattered_def_aux scattered_def_aux ^^ string "," ^^ pp_raw_annot annot ^^ string ")"

and pp_raw_reg_id_aux x = match x with
| RI_id(id) -> string "RI_id" ^^ string "(" ^^ pp_raw_id id ^^ string ")"

and pp_raw_reg_id x = match x with
| RI_aux(reg_id_aux,annot) -> string "RI_aux" ^^ string "(" ^^ pp_raw_reg_id_aux reg_id_aux ^^ string "," ^^ pp_raw_annot annot ^^ string ")"

and pp_raw_alias_spec_aux x = match x with
| AL_subreg(reg_id,id) -> string "AL_subreg" ^^ string "(" ^^ pp_raw_reg_id reg_id ^^ string "," ^^ pp_raw_id id ^^ string ")"
| AL_bit(reg_id,exp) -> string "AL_bit" ^^ string "(" ^^ pp_raw_reg_id reg_id ^^ string "," ^^ pp_raw_exp exp ^^ string ")"
| AL_slice(reg_id,exp,exp_prime) -> string "AL_slice" ^^ string "(" ^^ pp_raw_reg_id reg_id ^^ string "," ^^ pp_raw_exp exp ^^ string "," ^^ pp_raw_exp exp_prime ^^ string ")"
| AL_concat(reg_id,reg_id_prime) -> string "AL_concat" ^^ string "(" ^^ pp_raw_reg_id reg_id ^^ string "," ^^ pp_raw_reg_id reg_id_prime ^^ string ")"

and pp_raw_alias_spec x = match x with
| AL_aux(alias_spec_aux,annot) -> string "AL_aux" ^^ string "(" ^^ pp_raw_alias_spec_aux alias_spec_aux ^^ string "," ^^ pp_raw_annot annot ^^ string ")"

and pp_raw_dec_spec_aux x = match x with
| DEC_reg(effect,effect_prime,typ,id) -> string "DEC_reg" ^^ string "(" ^^ pp_raw_effect effect ^^ string "," ^^ pp_raw_effect effect_prime ^^ string "," ^^ pp_raw_typ typ ^^ string "," ^^ pp_raw_id id ^^ string ")"
| DEC_config(id,typ,exp) -> string "DEC_config" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ pp_raw_typ typ ^^ string "," ^^ pp_raw_exp exp ^^ string ")"
| DEC_alias(id,alias_spec) -> string "DEC_alias" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ pp_raw_alias_spec alias_spec ^^ string ")"
| DEC_typ_alias(typ,id,alias_spec) -> string "DEC_typ_alias" ^^ string "(" ^^ pp_raw_typ typ ^^ string "," ^^ pp_raw_id id ^^ string "," ^^ pp_raw_alias_spec alias_spec ^^ string ")"

and pp_raw_dec_spec x = match x with
| DEC_aux(dec_spec_aux,annot) -> string "DEC_aux" ^^ string "(" ^^ pp_raw_dec_spec_aux dec_spec_aux ^^ string "," ^^ pp_raw_annot annot ^^ string ")"

and pp_raw_prec x = match x with
| Infix -> string "Infix"
| InfixL -> string "InfixL"
| InfixR -> string "InfixR"

and pp_raw_loop_measure x = match x with
| Loop(loop,exp) -> string "Loop" ^^ string "(" ^^ pp_raw_loop loop ^^ string "," ^^ pp_raw_exp exp ^^ string ")"

and pp_raw_def x = match x with
| DEF_type(type_def) -> string "DEF_type" ^^ string "(" ^^ pp_raw_type_def type_def ^^ string ")"
| DEF_fundef(fundef) -> string "DEF_fundef" ^^ string "(" ^^ pp_raw_fundef fundef ^^ string ")"
| DEF_mapdef(mapdef) -> string "DEF_mapdef" ^^ string "(" ^^ pp_raw_mapdef mapdef ^^ string ")"
| DEF_val(letbind) -> string "DEF_val" ^^ string "(" ^^ pp_raw_letbind letbind ^^ string ")"
| DEF_spec(val_spec) -> string "DEF_spec" ^^ string "(" ^^ pp_raw_val_spec val_spec ^^ string ")"
| DEF_fixity(prec,num,id) -> string "DEF_fixity" ^^ string "(" ^^ pp_raw_prec prec ^^ string "," ^^ pp_raw_num num ^^ string "," ^^ pp_raw_id id ^^ string ")"
| DEF_overload(id,id0) -> string "DEF_overload" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (id0) -> string "(" ^^ pp_raw_id id0 ^^ string ")") id0) ^^ string "]" ^^ string ")"
| DEF_default(default_spec) -> string "DEF_default" ^^ string "(" ^^ pp_raw_default_spec default_spec ^^ string ")"
| DEF_scattered(scattered_def) -> string "DEF_scattered" ^^ string "(" ^^ pp_raw_scattered_def scattered_def ^^ string ")"
| DEF_measure(id,pat,exp) -> string "DEF_measure" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ pp_raw_pat pat ^^ string "," ^^ pp_raw_exp exp ^^ string ")"
| DEF_loop_measures(id,loop_measure0) -> string "DEF_loop_measures" ^^ string "(" ^^ pp_raw_id id ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (loop_measure0) -> string "(" ^^ pp_raw_loop_measure loop_measure0 ^^ string ")") loop_measure0) ^^ string "]" ^^ string ")"
| DEF_reg_dec(dec_spec) -> string "DEF_reg_dec" ^^ string "(" ^^ pp_raw_dec_spec dec_spec ^^ string ")"
| DEF_internal_mutrec(fundef0) -> string "DEF_internal_mutrec" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (fundef0) -> string "(" ^^ pp_raw_fundef fundef0 ^^ string ")") fundef0) ^^ string "]" ^^ string ")"
| DEF_pragma(string1,string2,l) -> string "DEF_pragma" ^^ string "(" ^^ pp_raw_string string1 ^^ string "," ^^ pp_raw_string string2 ^^ string "," ^^ pp_raw_l l ^^ string ")"

and pp_raw_defs x = match x with
| Defs(def0) -> string "Defs" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (def0) -> string "(" ^^ pp_raw_def def0 ^^ string ")\n") def0) ^^ string "]" ^^ string ")"


let rec pp_n x = string (string_of_int x)

and pp_num x = string (Nat_big_num.to_string x)

and pp_nat x = string (Nat_big_num.to_string x)

and pp_hex x = string x ^^ string ""

and pp_bin x = string x ^^ string ""

and pp_string x = string x ^^ string ""

and pp_regexp x = string x ^^ string ""

and pp_real x = string x ^^ string ""

and pp_value x = string "TODO:value"

and pp_x x = string x

and pp_ix x = string x

and pp_id_aux x = match x with
| Id(x) -> pp_x x
| Operator(x) -> group(string "" ^^ string "(" ^^ break 1 ^^ string "operator" ^^ break 1 ^^ pp_x x ^^ break 1 ^^ string ")" ^^ string "")

and pp_id x = match x with
| Id_aux(id_aux,l) -> pp_id_aux id_aux

and pp_kid_aux x = match x with
| Var(x) -> group(string "" ^^ string "'" ^^ break 1 ^^ pp_x x ^^ string "")

and pp_kid x = match x with
| Kid_aux(kid_aux,l) -> pp_kid_aux kid_aux

and pp_kind_aux x = match x with
| K_type -> string "Type"
| K_int -> string "Int"
| K_order -> string "Order"
| K_bool -> string "Bool"

and pp_kind x = match x with
| K_aux(kind_aux,l) -> pp_kind_aux kind_aux

and pp_nexp_aux x = match x with
| Nexp_id(id) -> pp_id id
| Nexp_var(kid) -> pp_kid kid
| Nexp_constant(num) -> pp_num num
| Nexp_app(id,nexp0) -> group(string "" ^^ nest 2 (pp_id id) ^^ break 1 ^^ string "(" ^^ break 1 ^^ group(separate (string ",") (List.map (function (nexp0) -> nest 2 (pp_nexp nexp0)) nexp0)) ^^ break 1 ^^ string ")" ^^ string "")
| Nexp_times(nexp1,nexp2) -> group(string "" ^^ nest 2 (pp_nexp nexp1) ^^ break 1 ^^ string "*" ^^ break 1 ^^ nest 2 (pp_nexp nexp2) ^^ string "")
| Nexp_sum(nexp1,nexp2) -> group(string "" ^^ nest 2 (pp_nexp nexp1) ^^ break 1 ^^ string "+" ^^ break 1 ^^ nest 2 (pp_nexp nexp2) ^^ string "")
| Nexp_minus(nexp1,nexp2) -> group(string "" ^^ nest 2 (pp_nexp nexp1) ^^ break 1 ^^ string "-" ^^ break 1 ^^ nest 2 (pp_nexp nexp2) ^^ string "")
| Nexp_exp(nexp) -> group(string "" ^^ string "2" ^^ break 1 ^^ string "^" ^^ break 1 ^^ nest 2 (pp_nexp nexp) ^^ string "")
| Nexp_neg(nexp) -> group(string "" ^^ string "-" ^^ break 1 ^^ nest 2 (pp_nexp nexp) ^^ string "")

and pp_nexp x = match x with
| Nexp_aux(nexp_aux,l) -> pp_nexp_aux nexp_aux

and pp_order_aux x = match x with
| Ord_var(kid) -> pp_kid kid
| Ord_inc -> string "inc"
| Ord_dec -> string "dec"

and pp_order x = match x with
| Ord_aux(order_aux,l) -> pp_order_aux order_aux

and pp_base_effect_aux x = match x with
| BE_rreg -> string "rreg"
| BE_wreg -> string "wreg"
| BE_rmem -> string "rmem"
| BE_rmemt -> string "rmemt"
| BE_wmem -> string "wmem"
| BE_eamem -> string "wmea"
| BE_exmem -> string "exmem"
| BE_wmv -> string "wmv"
| BE_wmvt -> string "wmvt"
| BE_barr -> string "barr"
| BE_depend -> string "depend"
| BE_undef -> string "undef"
| BE_unspec -> string "unspec"
| BE_nondet -> string "nondet"
| BE_escape -> string "escape"
| BE_config -> string "config"

and pp_base_effect x = match x with
| BE_aux(base_effect_aux,l) -> pp_base_effect_aux base_effect_aux

and pp_effect_aux x = match x with
| Effect_set(base_effect0) -> group(string "" ^^ string "{" ^^ break 1 ^^ group(separate (string ",") (List.map (function (base_effect0) -> nest 2 (pp_base_effect base_effect0)) base_effect0)) ^^ break 1 ^^ string "}" ^^ string "")

and pp_effect x = match x with
| Effect_aux(effect_aux,l) -> pp_effect_aux effect_aux

and pp_typ_aux x = match x with
| Typ_internal_unknown -> string ""
| Typ_id(id) -> pp_id id
| Typ_var(kid) -> pp_kid kid
| Typ_fn(typ0,typ2,effect) -> group(string "" ^^ string "(" ^^ break 1 ^^ group(separate (string ",") (List.map (function (typ0) -> nest 2 (pp_typ typ0)) typ0)) ^^ break 1 ^^ string ")" ^^ break 1 ^^ string "->" ^^ break 1 ^^ nest 2 (pp_typ typ2) ^^ break 1 ^^ string "effectkw" ^^ break 1 ^^ nest 2 (pp_effect effect) ^^ string "")
| Typ_bidir(typ1,typ2,effect) -> group(string "" ^^ nest 2 (pp_typ typ1) ^^ break 1 ^^ string "<->" ^^ break 1 ^^ nest 2 (pp_typ typ2) ^^ break 1 ^^ string "effectkw" ^^ break 1 ^^ nest 2 (pp_effect effect) ^^ string "")
| Typ_tup(typ0) -> group(string "" ^^ string "(" ^^ break 1 ^^ group(separate (string ",") (List.map (function (typ0) -> nest 2 (pp_typ typ0)) typ0)) ^^ break 1 ^^ string ")" ^^ string "")
| Typ_app(id,typ_arg0) -> group(string "" ^^ nest 2 (pp_id id) ^^ break 1 ^^ string "(" ^^ break 1 ^^ group(separate (string ",") (List.map (function (typ_arg0) -> nest 2 (pp_typ_arg typ_arg0)) typ_arg0)) ^^ break 1 ^^ string ")" ^^ string "")
| Typ_exist(kinded_id0,n_constraint,typ) -> group(string "" ^^ string "{" ^^ break 1 ^^ group(separate (break 1) (List.map (function (kinded_id0) -> nest 2 (pp_kinded_id kinded_id0)) kinded_id0)) ^^ break 1 ^^ string "," ^^ break 1 ^^ nest 2 (pp_n_constraint n_constraint) ^^ break 1 ^^ string "." ^^ break 1 ^^ nest 2 (pp_typ typ) ^^ break 1 ^^ string "}" ^^ string "")

and pp_typ x = match x with
| Typ_aux(typ_aux,l) -> pp_typ_aux typ_aux

and pp_typ_arg_aux x = match x with
| A_nexp(nexp) -> pp_nexp nexp
| A_typ(typ) -> pp_typ typ
| A_order(order) -> pp_order order
| A_bool(n_constraint) -> pp_n_constraint n_constraint

and pp_typ_arg x = match x with
| A_aux(typ_arg_aux,l) -> pp_typ_arg_aux typ_arg_aux

and pp_n_constraint_aux x = match x with
| NC_equal(nexp,nexp_prime) -> group(string "" ^^ nest 2 (pp_nexp nexp) ^^ break 1 ^^ string "==" ^^ break 1 ^^ nest 2 (pp_nexp nexp_prime) ^^ string "")
| NC_bounded_ge(nexp,nexp_prime) -> group(string "" ^^ nest 2 (pp_nexp nexp) ^^ break 1 ^^ string ">=" ^^ break 1 ^^ nest 2 (pp_nexp nexp_prime) ^^ string "")
| NC_bounded_gt(nexp,nexp_prime) -> group(string "" ^^ nest 2 (pp_nexp nexp) ^^ break 1 ^^ string ">" ^^ break 1 ^^ nest 2 (pp_nexp nexp_prime) ^^ string "")
| NC_bounded_le(nexp,nexp_prime) -> group(string "" ^^ nest 2 (pp_nexp nexp) ^^ break 1 ^^ string "<=" ^^ break 1 ^^ nest 2 (pp_nexp nexp_prime) ^^ string "")
| NC_bounded_lt(nexp,nexp_prime) -> group(string "" ^^ nest 2 (pp_nexp nexp) ^^ break 1 ^^ string "<" ^^ break 1 ^^ nest 2 (pp_nexp nexp_prime) ^^ string "")
| NC_not_equal(nexp,nexp_prime) -> group(string "" ^^ nest 2 (pp_nexp nexp) ^^ break 1 ^^ string "!=" ^^ break 1 ^^ nest 2 (pp_nexp nexp_prime) ^^ string "")
| NC_set(kid,num0) -> group(string "" ^^ nest 2 (pp_kid kid) ^^ break 1 ^^ string "IN" ^^ break 1 ^^ string "{" ^^ break 1 ^^ group(separate (string ",") (List.map (function (num0) -> pp_num num0) num0)) ^^ break 1 ^^ string "}" ^^ string "")
| NC_or(n_constraint,n_constraint_prime) -> group(string "" ^^ nest 2 (pp_n_constraint n_constraint) ^^ break 1 ^^ string "&" ^^ break 1 ^^ nest 2 (pp_n_constraint n_constraint_prime) ^^ string "")
| NC_and(n_constraint,n_constraint_prime) -> group(string "" ^^ nest 2 (pp_n_constraint n_constraint) ^^ break 1 ^^ string "|" ^^ break 1 ^^ nest 2 (pp_n_constraint n_constraint_prime) ^^ string "")
| NC_app(id,typ_arg0) -> group(string "" ^^ nest 2 (pp_id id) ^^ break 1 ^^ string "(" ^^ break 1 ^^ group(separate (string ",") (List.map (function (typ_arg0) -> nest 2 (pp_typ_arg typ_arg0)) typ_arg0)) ^^ break 1 ^^ string ")" ^^ string "")
| NC_var(kid) -> pp_kid kid
| NC_true -> string "true"
| NC_false -> string "false"

and pp_n_constraint x = match x with
| NC_aux(n_constraint_aux,l) -> pp_n_constraint_aux n_constraint_aux

and pp_kinded_id_aux x = match x with
| KOpt_kind(kind,kid) -> group(string "" ^^ pp_kind kind ^^ break 1 ^^ pp_kid kid ^^ string "")

and pp_kinded_id x = match x with
| KOpt_aux(kinded_id_aux,l) -> pp_kinded_id_aux kinded_id_aux

and pp_quant_item_aux x = match x with
| QI_id(kinded_id) -> pp_kinded_id kinded_id
| QI_constraint(n_constraint) -> pp_n_constraint n_constraint
| QI_constant(kinded_id0) -> group(separate (break 1) (List.map (function (kinded_id0) -> pp_kinded_id kinded_id0) kinded_id0))

and pp_quant_item x = match x with
| QI_aux(quant_item_aux,l) -> pp_quant_item_aux quant_item_aux

and pp_typquant_aux x = match x with
| TypQ_tq(quant_item0) -> group(string "" ^^ string "forall" ^^ break 1 ^^ group(separate (string ",") (List.map (function (quant_item0) -> nest 2 (pp_quant_item quant_item0)) quant_item0)) ^^ break 1 ^^ string "." ^^ string "")
| TypQ_no_forall -> string ""

and pp_typquant x = match x with
| TypQ_aux(typquant_aux,l) -> pp_typquant_aux typquant_aux

and pp_typschm_aux x = match x with
| TypSchm_ts(typquant,typ) -> group(string "" ^^ pp_typquant typquant ^^ break 1 ^^ pp_typ typ ^^ string "")

and pp_typschm x = match x with
| TypSchm_aux(typschm_aux,l) -> pp_typschm_aux typschm_aux

and pp_type_def x = match x with
| TD_aux (x,y) -> pp_type_def_aux x

and pp_type_def_aux x = match x with
| TD_abbrev(id,typquant,typ_arg) -> group(string "" ^^ string "type" ^^ break 1 ^^ nest 2 (pp_id id) ^^ break 1 ^^ nest 2 (pp_typquant typquant) ^^ break 1 ^^ string "=" ^^ break 1 ^^ nest 2 (pp_typ_arg typ_arg) ^^ string "")
| TD_record(id,typquant,typ0_id0,semi_opt) -> group(string "" ^^ string "typedef" ^^ break 1 ^^ nest 2 (pp_id id) ^^ break 1 ^^ string "=" ^^ break 1 ^^ string "const" ^^ break 1 ^^ string "struct" ^^ break 1 ^^ nest 2 (pp_typquant typquant) ^^ break 1 ^^ string "{" ^^ break 1 ^^ group(separate (string ";") (List.map (function (typ0,id0) -> nest 2 (pp_typ typ0) ^^ string " " ^^ nest 2 (pp_id id0)) typ0_id0)) ^^ break 1 ^^ nest 2 (pp_semi_opt semi_opt) ^^ break 1 ^^ string "}" ^^ string "")
| TD_variant(id,typquant,type_union0,semi_opt) -> group(string "" ^^ string "typedef" ^^ break 1 ^^ nest 2 (pp_id id) ^^ break 1 ^^ string "=" ^^ break 1 ^^ string "const" ^^ break 1 ^^ string "union" ^^ break 1 ^^ nest 2 (pp_typquant typquant) ^^ break 1 ^^ string "{" ^^ break 1 ^^ group(separate (string ";") (List.map (function (type_union0) -> nest 2 (pp_type_union type_union0)) type_union0)) ^^ break 1 ^^ nest 2 (pp_semi_opt semi_opt) ^^ break 1 ^^ string "}" ^^ string "")
| TD_enum(id,id0,semi_opt) -> group(string "" ^^ string "typedef" ^^ break 1 ^^ nest 2 (pp_id id) ^^ break 1 ^^ string "=" ^^ break 1 ^^ string "enumerate" ^^ break 1 ^^ string "{" ^^ break 1 ^^ group(separate (string ";") (List.map (function (id0) -> nest 2 (pp_id id0)) id0)) ^^ break 1 ^^ nest 2 (pp_semi_opt semi_opt) ^^ break 1 ^^ string "}" ^^ string "")
| TD_bitfield(id,typ,id0_index_range0) -> group(string "" ^^ string "bitfield" ^^ break 1 ^^ nest 2 (pp_id id) ^^ break 1 ^^ string ":" ^^ break 1 ^^ nest 2 (pp_typ typ) ^^ break 1 ^^ string "=" ^^ break 1 ^^ string "{" ^^ break 1 ^^ group(separate (string ",") (List.map (function (id0,index_range0) -> nest 2 (pp_id id0) ^^ string " " ^^ string ":" ^^ string " " ^^ nest 2 (pp_index_range index_range0)) id0_index_range0)) ^^ break 1 ^^ string "}" ^^ string "")

and pp_type_union_aux x = match x with
| Tu_ty_id(typ,id) -> group(string "" ^^ pp_typ typ ^^ break 1 ^^ pp_id id ^^ string "")

and pp_type_union x = match x with
| Tu_aux(type_union_aux,l) -> pp_type_union_aux type_union_aux

and pp_index_range_aux x = match x with
| BF_single(nexp) -> pp_nexp nexp
| BF_range(nexp1,nexp2) -> group(string "" ^^ nest 2 (pp_nexp nexp1) ^^ break 1 ^^ string ".." ^^ break 1 ^^ nest 2 (pp_nexp nexp2) ^^ string "")
| BF_concat(index_range1,index_range2) -> group(string "" ^^ nest 2 (pp_index_range index_range1) ^^ break 1 ^^ string "," ^^ break 1 ^^ nest 2 (pp_index_range index_range2) ^^ string "")

and pp_index_range x = match x with
| BF_aux(index_range_aux,l) -> pp_index_range_aux index_range_aux

and pp_lit_aux x = match x with
| L_unit -> group(string "" ^^ string "(" ^^ break 1 ^^ string ")" ^^ string "")
| L_zero -> string "bitzero"
| L_one -> string "bitone"
| L_true -> string "true"
| L_false -> string "false"
| L_num(num) -> pp_num num
| L_hex(hex) -> pp_hex hex
| L_bin(bin) -> pp_bin bin
| L_string(string1) -> pp_string string1
| L_undef -> string "undefined"
| L_real(real) -> pp_real real

and pp_lit x = match x with
| L_aux(lit_aux,l) -> pp_lit_aux lit_aux

and pp_semi_opt _ = string "semi_opt"

and pp_typ_pat_aux x = match x with
| TP_wild -> string "_"
| TP_var(kid) -> pp_kid kid
| TP_app(id,typ_pat0) -> group(string "" ^^ nest 2 (pp_id id) ^^ break 1 ^^ string "(" ^^ break 1 ^^ group(separate (string ",") (List.map (function (typ_pat0) -> nest 2 (pp_typ_pat typ_pat0)) typ_pat0)) ^^ break 1 ^^ string ")" ^^ string "")

and pp_typ_pat x = match x with
| TP_aux(typ_pat_aux,l) -> pp_typ_pat_aux typ_pat_aux

and pp_pat_aux x = match x with
| P_lit(lit) -> pp_lit lit
| P_wild -> string "_"
| P_or(pat1,pat2) -> group(string "" ^^ nest 2 (pp_pat pat1) ^^ break 1 ^^ string "|" ^^ break 1 ^^ nest 2 (pp_pat pat2) ^^ string "")
| P_not(pat) -> group(string "" ^^ string "~" ^^ break 1 ^^ nest 2 (pp_pat pat) ^^ string "")
| P_as(pat,id) -> group(string "" ^^ string "(" ^^ break 1 ^^ nest 2 (pp_pat pat) ^^ break 1 ^^ string "as" ^^ break 1 ^^ nest 2 (pp_id id) ^^ break 1 ^^ string ")" ^^ string "")
| P_typ(typ,pat) -> group(string "" ^^ string "(" ^^ break 1 ^^ nest 2 (pp_typ typ) ^^ break 1 ^^ string ")" ^^ break 1 ^^ nest 2 (pp_pat pat) ^^ string "")
| P_id(id) -> pp_id id
| P_var(pat,typ_pat) -> group(string "" ^^ pp_pat pat ^^ break 1 ^^ pp_typ_pat typ_pat ^^ string "")
| P_app(id,pat0) -> group(string "" ^^ nest 2 (pp_id id) ^^ break 1 ^^ string "(" ^^ break 1 ^^ group(separate (string ",") (List.map (function (pat0) -> nest 2 (pp_pat pat0)) pat0)) ^^ break 1 ^^ string ")" ^^ string "")
| P_vector(pat0) -> group(string "" ^^ string "[" ^^ break 1 ^^ group(separate (string ",") (List.map (function (pat0) -> nest 2 (pp_pat pat0)) pat0)) ^^ break 1 ^^ string "]" ^^ string "")
| P_vector_concat(pat0) -> group(separate (string "@") (List.map (function (pat0) -> pp_pat pat0) pat0))
| P_tup(pat0) -> group(string "" ^^ string "(" ^^ break 1 ^^ group(separate (string ",") (List.map (function (pat0) -> nest 2 (pp_pat pat0)) pat0)) ^^ break 1 ^^ string ")" ^^ string "")
| P_list(pat0) -> group(string "" ^^ string "[||" ^^ break 1 ^^ group(separate (string ",") (List.map (function (pat0) -> nest 2 (pp_pat pat0)) pat0)) ^^ break 1 ^^ string "||]" ^^ string "")
| P_cons(pat1,pat2) -> group(string "" ^^ nest 2 (pp_pat pat1) ^^ break 1 ^^ string "::" ^^ break 1 ^^ nest 2 (pp_pat pat2) ^^ string "")
| P_string_append(pat0) -> group(separate (string "^^") (List.map (function (pat0) -> pp_pat pat0) pat0))

and pp_pat x = match x with
| P_aux(pat_aux,annot) -> pp_pat_aux pat_aux

and pp_loop _ = string "loop"

and pp_internal_loop_measure_aux x = match x with
| Measure_none -> string ""
| Measure_some(exp) -> group(string "" ^^ string "termination_measure" ^^ break 1 ^^ string "{" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ string "}" ^^ string "")

and pp_internal_loop_measure x = match x with
| Measure_aux(internal_loop_measure_aux,l) -> pp_internal_loop_measure_aux internal_loop_measure_aux

and pp_exp_aux x = match x with
| E_block(exp0) -> group(string "" ^^ string "{" ^^ break 1 ^^ group(separate (string ";") (List.map (function (exp0) -> nest 2 (pp_exp exp0)) exp0)) ^^ break 1 ^^ string "}" ^^ string "")
| E_id(id) -> pp_id id
| E_lit(lit) -> pp_lit lit
| E_cast(typ,exp) -> group(string "" ^^ string "(" ^^ break 1 ^^ nest 2 (pp_typ typ) ^^ break 1 ^^ string ")" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ string "")
| E_app(id,exp0) -> group(string "" ^^ nest 2 (pp_id id) ^^ break 1 ^^ string "(" ^^ break 1 ^^ group(separate (string ",") (List.map (function (exp0) -> nest 2 (pp_exp exp0)) exp0)) ^^ break 1 ^^ string ")" ^^ string "")
| E_app_infix(exp1,id,exp2) -> group(string "" ^^ pp_exp exp1 ^^ break 1 ^^ pp_id id ^^ break 1 ^^ pp_exp exp2 ^^ string "")
| E_tuple(exp0) -> group(string "" ^^ string "(" ^^ break 1 ^^ group(separate (string ",") (List.map (function (exp0) -> nest 2 (pp_exp exp0)) exp0)) ^^ break 1 ^^ string ")" ^^ string "")
| E_if(exp1,exp2,exp3) -> group(string "" ^^ string "if" ^^ break 1 ^^ nest 2 (pp_exp exp1) ^^ break 1 ^^ string "then" ^^ break 1 ^^ nest 2 (pp_exp exp2) ^^ break 1 ^^ string "else" ^^ break 1 ^^ nest 2 (pp_exp exp3) ^^ string "")
| E_loop(loop,internal_loop_measure,exp1,exp2) -> group(string "" ^^ pp_loop loop ^^ break 1 ^^ pp_internal_loop_measure internal_loop_measure ^^ break 1 ^^ pp_exp exp1 ^^ break 1 ^^ pp_exp exp2 ^^ string "")
| E_for(id,exp1,exp2,exp3,order,exp4) -> group(string "" ^^ string "foreach" ^^ break 1 ^^ string "(" ^^ break 1 ^^ nest 2 (pp_id id) ^^ break 1 ^^ string "from" ^^ break 1 ^^ nest 2 (pp_exp exp1) ^^ break 1 ^^ string "to" ^^ break 1 ^^ nest 2 (pp_exp exp2) ^^ break 1 ^^ string "by" ^^ break 1 ^^ nest 2 (pp_exp exp3) ^^ break 1 ^^ string "in" ^^ break 1 ^^ nest 2 (pp_order order) ^^ break 1 ^^ string ")" ^^ break 1 ^^ nest 2 (pp_exp exp4) ^^ string "")
| E_vector(exp0) -> group(string "" ^^ string "[" ^^ break 1 ^^ group(separate (string ",") (List.map (function (exp0) -> nest 2 (pp_exp exp0)) exp0)) ^^ break 1 ^^ string "]" ^^ string "")
| E_vector_access(exp,exp_prime) -> group(string "" ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ string "[" ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string "]" ^^ string "")
| E_vector_subrange(exp,exp1,exp2) -> group(string "" ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ string "[" ^^ break 1 ^^ nest 2 (pp_exp exp1) ^^ break 1 ^^ string ".." ^^ break 1 ^^ nest 2 (pp_exp exp2) ^^ break 1 ^^ string "]" ^^ string "")
| E_vector_update(exp,exp1,exp2) -> group(string "" ^^ string "[" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ string "with" ^^ break 1 ^^ nest 2 (pp_exp exp1) ^^ break 1 ^^ string "=" ^^ break 1 ^^ nest 2 (pp_exp exp2) ^^ break 1 ^^ string "]" ^^ string "")
| E_vector_update_subrange(exp,exp1,exp2,exp3) -> group(string "" ^^ string "[" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ string "with" ^^ break 1 ^^ nest 2 (pp_exp exp1) ^^ break 1 ^^ string ".." ^^ break 1 ^^ nest 2 (pp_exp exp2) ^^ break 1 ^^ string "=" ^^ break 1 ^^ nest 2 (pp_exp exp3) ^^ break 1 ^^ string "]" ^^ string "")
| E_vector_append(exp1,exp2) -> group(string "" ^^ nest 2 (pp_exp exp1) ^^ break 1 ^^ string "@" ^^ break 1 ^^ nest 2 (pp_exp exp2) ^^ string "")
| E_list(exp0) -> group(string "" ^^ string "[|" ^^ break 1 ^^ group(separate (string ",") (List.map (function (exp0) -> nest 2 (pp_exp exp0)) exp0)) ^^ break 1 ^^ string "|]" ^^ string "")
| E_cons(exp1,exp2) -> group(string "" ^^ nest 2 (pp_exp exp1) ^^ break 1 ^^ string "::" ^^ break 1 ^^ nest 2 (pp_exp exp2) ^^ string "")
| E_record(fexp0) -> group(string "" ^^ string "struct" ^^ break 1 ^^ string "{" ^^ break 1 ^^ group(separate (string ",") (List.map (function (fexp0) -> nest 2 (pp_fexp fexp0)) fexp0)) ^^ break 1 ^^ string "}" ^^ string "")
| E_record_update(exp,fexp0) -> group(string "" ^^ string "{" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ string "with" ^^ break 1 ^^ group(separate (string ",") (List.map (function (fexp0) -> nest 2 (pp_fexp fexp0)) fexp0)) ^^ break 1 ^^ string "}" ^^ string "")
| E_field(exp,id) -> group(string "" ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ string "." ^^ break 1 ^^ nest 2 (pp_id id) ^^ string "")
| E_case(exp,pexp0) -> group(string "" ^^ string "match" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ string "{" ^^ break 1 ^^ group(separate (string ",") (List.map (function (pexp0) -> nest 2 (pp_pexp pexp0)) pexp0)) ^^ break 1 ^^ string "}" ^^ string "")
| E_let(letbind,exp) -> group(string "" ^^ nest 2 (pp_letbind letbind) ^^ break 1 ^^ string "in" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ string "")
| E_assign(lexp,exp) -> group(string "" ^^ nest 2 (pp_lexp lexp) ^^ break 1 ^^ string "=" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ string "")
| E_sizeof(nexp) -> group(string "" ^^ string "sizeof" ^^ break 1 ^^ nest 2 (pp_nexp nexp) ^^ string "")
| E_return(exp) -> group(string "" ^^ string "return" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ string "")
| E_exit(exp) -> group(string "" ^^ string "exit" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ string "")
| E_ref(id) -> group(string "" ^^ string "ref" ^^ break 1 ^^ nest 2 (pp_id id) ^^ string "")
| E_throw(exp) -> group(string "" ^^ string "throw" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ string "")
| E_try(exp,pexp0) -> group(string "" ^^ string "try" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ string "catch" ^^ break 1 ^^ string "{" ^^ break 1 ^^ group(separate (string ",") (List.map (function (pexp0) -> nest 2 (pp_pexp pexp0)) pexp0)) ^^ break 1 ^^ string "}" ^^ string "")
| E_assert(exp,exp_prime) -> group(string "" ^^ string "assert" ^^ break 1 ^^ string "(" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ string "," ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string ")" ^^ string "")
| E_var(lexp,exp,exp_prime) -> group(string "" ^^ string "var" ^^ break 1 ^^ nest 2 (pp_lexp lexp) ^^ break 1 ^^ string "=" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ string "in" ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ string "")
| E_internal_plet(pat,exp,exp_prime) -> group(string "" ^^ string "let" ^^ break 1 ^^ nest 2 (pp_pat pat) ^^ break 1 ^^ string "=" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ string "in" ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ string "")
| E_internal_return(exp) -> group(string "" ^^ string "return_int" ^^ break 1 ^^ string "(" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ string ")" ^^ string "")
| E_internal_value(value) -> pp_value value
| E_constraint(n_constraint) -> group(string "" ^^ string "constraint" ^^ break 1 ^^ nest 2 (pp_n_constraint n_constraint) ^^ string "")

and pp_exp x = match x with
| E_aux(exp_aux,annot) -> pp_exp_aux exp_aux

and pp_lexp_aux x = match x with
| LEXP_id(id) -> pp_id id
| LEXP_deref(exp) -> group(string "" ^^ string "deref" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ string "")
| LEXP_memory(id,exp0) -> group(string "" ^^ nest 2 (pp_id id) ^^ break 1 ^^ string "(" ^^ break 1 ^^ group(separate (string ",") (List.map (function (exp0) -> nest 2 (pp_exp exp0)) exp0)) ^^ break 1 ^^ string ")" ^^ string "")
| LEXP_cast(typ,id) -> group(string "" ^^ string "(" ^^ break 1 ^^ nest 2 (pp_typ typ) ^^ break 1 ^^ string ")" ^^ break 1 ^^ nest 2 (pp_id id) ^^ string "")
| LEXP_tup(lexp0) -> group(string "" ^^ string "(" ^^ break 1 ^^ group(separate (string ",") (List.map (function (lexp0) -> nest 2 (pp_lexp lexp0)) lexp0)) ^^ break 1 ^^ string ")" ^^ string "")
| LEXP_vector_concat(lexp0) -> group(separate (string "@") (List.map (function (lexp0) -> pp_lexp lexp0) lexp0))
| LEXP_vector(lexp,exp) -> group(string "" ^^ nest 2 (pp_lexp lexp) ^^ break 1 ^^ string "[" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ string "]" ^^ string "")
| LEXP_vector_range(lexp,exp1,exp2) -> group(string "" ^^ nest 2 (pp_lexp lexp) ^^ break 1 ^^ string "[" ^^ break 1 ^^ nest 2 (pp_exp exp1) ^^ break 1 ^^ string ".." ^^ break 1 ^^ nest 2 (pp_exp exp2) ^^ break 1 ^^ string "]" ^^ string "")
| LEXP_field(lexp,id) -> group(string "" ^^ nest 2 (pp_lexp lexp) ^^ break 1 ^^ string "." ^^ break 1 ^^ nest 2 (pp_id id) ^^ string "")

and pp_lexp x = match x with
| LEXP_aux(lexp_aux,annot) -> pp_lexp_aux lexp_aux

and pp_fexp_aux x = match x with
| FE_Fexp(id,exp) -> group(string "" ^^ nest 2 (pp_id id) ^^ break 1 ^^ string "=" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ string "")

and pp_fexp x = match x with
| FE_aux(fexp_aux,annot) -> pp_fexp_aux fexp_aux

and pp_opt_default_aux x = match x with
| Def_val_empty -> string ""
| Def_val_dec(exp) -> group(string "" ^^ string ";" ^^ break 1 ^^ string "default" ^^ break 1 ^^ string "=" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ string "")

and pp_opt_default x = match x with
| Def_val_aux(opt_default_aux,annot) -> pp_opt_default_aux opt_default_aux

and pp_pexp_aux x = match x with
| Pat_exp(pat,exp) -> group(string "" ^^ nest 2 (pp_pat pat) ^^ break 1 ^^ string "->" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ string "")
| Pat_when(pat,exp1,exp) -> group(string "" ^^ nest 2 (pp_pat pat) ^^ break 1 ^^ string "when" ^^ break 1 ^^ nest 2 (pp_exp exp1) ^^ break 1 ^^ string "->" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ string "")

and pp_pexp x = match x with
| Pat_aux(pexp_aux,annot) -> pp_pexp_aux pexp_aux

and pp_tannot_opt_aux x = match x with
| Typ_annot_opt_none -> string ""
| Typ_annot_opt_some(typquant,typ) -> group(string "" ^^ pp_typquant typquant ^^ break 1 ^^ pp_typ typ ^^ string "")

and pp_tannot_opt x = match x with
| Typ_annot_opt_aux(tannot_opt_aux,l) -> pp_tannot_opt_aux tannot_opt_aux

and pp_rec_opt_aux x = match x with
| Rec_nonrec -> string ""
| Rec_rec -> string "rec"
| Rec_measure(pat,exp) -> group(string "" ^^ string "{" ^^ break 1 ^^ nest 2 (pp_pat pat) ^^ break 1 ^^ string "->" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ string "}" ^^ string "")

and pp_rec_opt x = match x with
| Rec_aux(rec_opt_aux,l) -> pp_rec_opt_aux rec_opt_aux

and pp_effect_opt_aux x = match x with
| Effect_opt_none -> string ""
| Effect_opt_effect(effect) -> group(string "" ^^ string "effectkw" ^^ break 1 ^^ nest 2 (pp_effect effect) ^^ string "")

and pp_effect_opt x = match x with
| Effect_opt_aux(effect_opt_aux,l) -> pp_effect_opt_aux effect_opt_aux

and pp_pexp_funcl x = pp_pexp x

and pp_funcl_aux x = match x with
| FCL_Funcl(id,pexp_funcl) -> group(string "" ^^ pp_id id ^^ break 1 ^^ pp_pexp_funcl pexp_funcl ^^ string "")

and pp_funcl x = match x with
| FCL_aux(funcl_aux,annot) -> pp_funcl_aux funcl_aux

and pp_fundef_aux x = match x with
| FD_function(rec_opt,tannot_opt,effect_opt,funcl0) -> group(string "" ^^ string "function" ^^ break 1 ^^ nest 2 (pp_rec_opt rec_opt) ^^ break 1 ^^ nest 2 (pp_tannot_opt tannot_opt) ^^ break 1 ^^ nest 2 (pp_effect_opt effect_opt) ^^ break 1 ^^ group(separate (string "and") (List.map (function (funcl0) -> nest 2 (pp_funcl funcl0)) funcl0)) ^^ string "")

and pp_fundef x = match x with
| FD_aux(fundef_aux,annot) -> pp_fundef_aux fundef_aux

and pp_mpat_aux x = match x with
| MP_lit(lit) -> pp_lit lit
| MP_id(id) -> pp_id id
| MP_app(id,mpat0) -> group(string "" ^^ nest 2 (pp_id id) ^^ break 1 ^^ string "(" ^^ break 1 ^^ group(separate (string ",") (List.map (function (mpat0) -> nest 2 (pp_mpat mpat0)) mpat0)) ^^ break 1 ^^ string ")" ^^ string "")
| MP_vector(mpat0) -> group(string "" ^^ string "[" ^^ break 1 ^^ group(separate (string ",") (List.map (function (mpat0) -> nest 2 (pp_mpat mpat0)) mpat0)) ^^ break 1 ^^ string "]" ^^ string "")
| MP_vector_concat(mpat0) -> group(separate (string "@") (List.map (function (mpat0) -> pp_mpat mpat0) mpat0))
| MP_tup(mpat0) -> group(string "" ^^ string "(" ^^ break 1 ^^ group(separate (string ",") (List.map (function (mpat0) -> nest 2 (pp_mpat mpat0)) mpat0)) ^^ break 1 ^^ string ")" ^^ string "")
| MP_list(mpat0) -> group(string "" ^^ string "[||" ^^ break 1 ^^ group(separate (string ",") (List.map (function (mpat0) -> nest 2 (pp_mpat mpat0)) mpat0)) ^^ break 1 ^^ string "||]" ^^ string "")
| MP_cons(mpat1,mpat2) -> group(string "" ^^ nest 2 (pp_mpat mpat1) ^^ break 1 ^^ string "::" ^^ break 1 ^^ nest 2 (pp_mpat mpat2) ^^ string "")
| MP_string_append(mpat0) -> group(separate (string "^^") (List.map (function (mpat0) -> pp_mpat mpat0) mpat0))
| MP_typ(mpat,typ) -> group(string "" ^^ nest 2 (pp_mpat mpat) ^^ break 1 ^^ string ":" ^^ break 1 ^^ nest 2 (pp_typ typ) ^^ string "")
| MP_as(mpat,id) -> group(string "" ^^ nest 2 (pp_mpat mpat) ^^ break 1 ^^ string "as" ^^ break 1 ^^ nest 2 (pp_id id) ^^ string "")

and pp_mpat x = match x with
| MP_aux(mpat_aux,annot) -> pp_mpat_aux mpat_aux

and pp_mpexp_aux x = match x with
| MPat_pat(mpat) -> pp_mpat mpat
| MPat_when(mpat,exp) -> group(string "" ^^ nest 2 (pp_mpat mpat) ^^ break 1 ^^ string "when" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ string "")

and pp_mpexp x = match x with
| MPat_aux(mpexp_aux,annot) -> pp_mpexp_aux mpexp_aux

and pp_mapcl_aux x = match x with
| MCL_bidir(mpexp1,mpexp2) -> group(string "" ^^ nest 2 (pp_mpexp mpexp1) ^^ break 1 ^^ string "<->" ^^ break 1 ^^ nest 2 (pp_mpexp mpexp2) ^^ string "")
| MCL_forwards(mpexp,exp) -> group(string "" ^^ nest 2 (pp_mpexp mpexp) ^^ break 1 ^^ string "=>" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ string "")
| MCL_backwards(mpexp,exp) -> group(string "" ^^ nest 2 (pp_mpexp mpexp) ^^ break 1 ^^ string "<-" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ string "")

and pp_mapcl x = match x with
| MCL_aux(mapcl_aux,annot) -> pp_mapcl_aux mapcl_aux

and pp_mapdef_aux x = match x with
| MD_mapping(id,tannot_opt,mapcl0) -> group(string "" ^^ string "mapping" ^^ break 1 ^^ nest 2 (pp_id id) ^^ break 1 ^^ nest 2 (pp_tannot_opt tannot_opt) ^^ break 1 ^^ string "=" ^^ break 1 ^^ string "{" ^^ break 1 ^^ group(separate (string ",") (List.map (function (mapcl0) -> nest 2 (pp_mapcl mapcl0)) mapcl0)) ^^ break 1 ^^ string "}" ^^ string "")

and pp_mapdef x = match x with
| MD_aux(mapdef_aux,annot) -> pp_mapdef_aux mapdef_aux

and pp_letbind_aux x = match x with
| LB_val(pat,exp) -> group(string "" ^^ string "let" ^^ break 1 ^^ nest 2 (pp_pat pat) ^^ break 1 ^^ string "=" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ string "")

and pp_letbind x = match x with
| LB_aux(letbind_aux,annot) -> pp_letbind_aux letbind_aux

and pp_val_spec x = match x with VS_aux(vs,annot) -> pp_val_spec_aux vs

and pp_val_spec_aux x = (* based on pretty_print_sail.ml doc_spec *)
match x with 
| VS_val_spec(ts,id,ext,is_cast) ->
  let doc_extern ext =
    let docs = List.map (fun (backend, rep) -> string (backend ^ ":") ^^ space ^^ utf8string ("\"" ^ String.escaped rep ^ "\"")) ext in
    if docs = [] then empty else equals ^^ space ^^ braces (separate (comma ^^ space) docs)
    in
     empty (*     if comment then docstring annot else*) 
     ^^ string "val" ^^ space
     ^^ (if is_cast then (string "cast" ^^ space) else empty)
     ^^ pp_id id ^^ space
     ^^ doc_extern ext
     ^^ colon ^^ space
     ^^ pp_typschm ts

and pp_default_spec_aux x = match x with
| DT_order(order) -> group(string "" ^^ string "default" ^^ break 1 ^^ string "Order" ^^ break 1 ^^ nest 2 (pp_order order) ^^ string "")

and pp_default_spec x = match x with
| DT_aux(default_spec_aux,l) -> pp_default_spec_aux default_spec_aux

and pp_scattered_def_aux x = match x with
| SD_function(rec_opt,tannot_opt,effect_opt,id) -> group(string "" ^^ string "scattered" ^^ break 1 ^^ string "function" ^^ break 1 ^^ nest 2 (pp_rec_opt rec_opt) ^^ break 1 ^^ nest 2 (pp_tannot_opt tannot_opt) ^^ break 1 ^^ nest 2 (pp_effect_opt effect_opt) ^^ break 1 ^^ nest 2 (pp_id id) ^^ string "")
| SD_funcl(funcl) -> group(string "" ^^ string "function" ^^ break 1 ^^ string "clause" ^^ break 1 ^^ nest 2 (pp_funcl funcl) ^^ string "")
| SD_variant(id,typquant) -> group(string "" ^^ string "scattered" ^^ break 1 ^^ string "typedef" ^^ break 1 ^^ nest 2 (pp_id id) ^^ break 1 ^^ string "=" ^^ break 1 ^^ string "const" ^^ break 1 ^^ string "union" ^^ break 1 ^^ nest 2 (pp_typquant typquant) ^^ string "")
| SD_unioncl(id,type_union) -> group(string "" ^^ string "union" ^^ break 1 ^^ nest 2 (pp_id id) ^^ break 1 ^^ string "member" ^^ break 1 ^^ nest 2 (pp_type_union type_union) ^^ string "")
| SD_mapping(id,tannot_opt) -> group(string "" ^^ string "scattered" ^^ break 1 ^^ string "mapping" ^^ break 1 ^^ nest 2 (pp_id id) ^^ break 1 ^^ string ":" ^^ break 1 ^^ nest 2 (pp_tannot_opt tannot_opt) ^^ string "")
| SD_mapcl(id,mapcl) -> group(string "" ^^ string "mapping" ^^ break 1 ^^ string "clause" ^^ break 1 ^^ nest 2 (pp_id id) ^^ break 1 ^^ string "=" ^^ break 1 ^^ nest 2 (pp_mapcl mapcl) ^^ string "")
| SD_end(id) -> group(string "" ^^ string "end" ^^ break 1 ^^ nest 2 (pp_id id) ^^ string "")

and pp_scattered_def x = match x with
| SD_aux(scattered_def_aux,annot) -> pp_scattered_def_aux scattered_def_aux

and pp_reg_id_aux x = match x with
| RI_id(id) -> pp_id id

and pp_reg_id x = match x with
| RI_aux(reg_id_aux,annot) -> pp_reg_id_aux reg_id_aux

and pp_alias_spec_aux x = match x with
| AL_subreg(reg_id,id) -> group(string "" ^^ nest 2 (pp_reg_id reg_id) ^^ break 1 ^^ string "." ^^ break 1 ^^ nest 2 (pp_id id) ^^ string "")
| AL_bit(reg_id,exp) -> group(string "" ^^ nest 2 (pp_reg_id reg_id) ^^ break 1 ^^ string "[" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ string "]" ^^ string "")
| AL_slice(reg_id,exp,exp_prime) -> group(string "" ^^ nest 2 (pp_reg_id reg_id) ^^ break 1 ^^ string "[" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ break 1 ^^ string ".." ^^ break 1 ^^ nest 2 (pp_exp exp_prime) ^^ break 1 ^^ string "]" ^^ string "")
| AL_concat(reg_id,reg_id_prime) -> group(string "" ^^ nest 2 (pp_reg_id reg_id) ^^ break 1 ^^ string ":" ^^ break 1 ^^ nest 2 (pp_reg_id reg_id_prime) ^^ string "")

and pp_alias_spec x = match x with
| AL_aux(alias_spec_aux,annot) -> pp_alias_spec_aux alias_spec_aux

and pp_dec_spec_aux x = match x with
| DEC_reg(effect,effect_prime,typ,id) -> group(string "" ^^ string "register" ^^ break 1 ^^ nest 2 (pp_effect effect) ^^ break 1 ^^ nest 2 (pp_effect effect_prime) ^^ break 1 ^^ nest 2 (pp_typ typ) ^^ break 1 ^^ nest 2 (pp_id id) ^^ string "")
| DEC_config(id,typ,exp) -> group(string "" ^^ string "register" ^^ break 1 ^^ string "configuration" ^^ break 1 ^^ nest 2 (pp_id id) ^^ break 1 ^^ string ":" ^^ break 1 ^^ nest 2 (pp_typ typ) ^^ break 1 ^^ string "=" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ string "")
| DEC_alias(id,alias_spec) -> group(string "" ^^ string "register" ^^ break 1 ^^ string "alias" ^^ break 1 ^^ nest 2 (pp_id id) ^^ break 1 ^^ string "=" ^^ break 1 ^^ nest 2 (pp_alias_spec alias_spec) ^^ string "")
| DEC_typ_alias(typ,id,alias_spec) -> group(string "" ^^ string "register" ^^ break 1 ^^ string "alias" ^^ break 1 ^^ nest 2 (pp_typ typ) ^^ break 1 ^^ nest 2 (pp_id id) ^^ break 1 ^^ string "=" ^^ break 1 ^^ nest 2 (pp_alias_spec alias_spec) ^^ string "")

and pp_dec_spec x = match x with
| DEC_aux(dec_spec_aux,annot) -> pp_dec_spec_aux dec_spec_aux

and pp_prec x = match x with
| Infix -> string "infix"
| InfixL -> string "infixl"
| InfixR -> string "infixr"

and pp_loop_measure x = match x with
| Loop(loop,exp) -> group(string "" ^^ pp_loop loop ^^ break 1 ^^ pp_exp exp ^^ string "")

and pp_def x = match x with
| DEF_type(type_def) -> pp_type_def type_def
| DEF_fundef(fundef) -> pp_fundef fundef
| DEF_mapdef(mapdef) -> pp_mapdef mapdef
| DEF_val(letbind) -> pp_letbind letbind
| DEF_spec(val_spec) -> pp_val_spec val_spec
| DEF_fixity(prec,num,id) -> group(string "" ^^ string "fix" ^^ break 1 ^^ nest 2 (pp_prec prec) ^^ break 1 ^^ pp_num num ^^ break 1 ^^ nest 2 (pp_id id) ^^ string "")
| DEF_overload(id,id0) -> group(string "" ^^ string "overload" ^^ break 1 ^^ nest 2 (pp_id id) ^^ break 1 ^^ string "[" ^^ break 1 ^^ group(separate (string ";") (List.map (function (id0) -> nest 2 (pp_id id0)) id0)) ^^ break 1 ^^ string "]" ^^ string "")
| DEF_default(default_spec) -> pp_default_spec default_spec
| DEF_scattered(scattered_def) -> pp_scattered_def scattered_def
| DEF_measure(id,pat,exp) -> group(string "" ^^ string "termination_measure" ^^ break 1 ^^ nest 2 (pp_id id) ^^ break 1 ^^ nest 2 (pp_pat pat) ^^ break 1 ^^ string "=" ^^ break 1 ^^ nest 2 (pp_exp exp) ^^ string "")
| DEF_loop_measures(id,loop_measure0) -> group(string "" ^^ string "termination_measure" ^^ break 1 ^^ nest 2 (pp_id id) ^^ break 1 ^^ group(separate (string ",") (List.map (function (loop_measure0) -> nest 2 (pp_loop_measure loop_measure0)) loop_measure0)) ^^ string "")
| DEF_reg_dec(dec_spec) -> pp_dec_spec dec_spec
| DEF_internal_mutrec(fundef0) -> group(separate (break 1) (List.map (function (fundef0) -> pp_fundef fundef0) fundef0))
| DEF_pragma(string1,string2,l) -> group(string "" ^^ string "$" ^^ break 1 ^^ pp_string string1 ^^ break 1 ^^ pp_string string2 ^^ string "")

and pp_defs x = match x with
| Defs(def0) -> group(separate (break 1) (List.map (function (def0) -> pp_def def0) def0))

